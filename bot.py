import asyncio
import logging
import random

from aiogram import types, Dispatcher, Bot
from aiogram.filters.command import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from bd import DB

scheduler = AsyncIOScheduler()
token = "7038604038:AAGrjTQljAcs7OKlYTBiKgzqptPoGZYptdI"
logging.basicConfig(level = logging.INFO)
bot = Bot(token)
dp = Dispatcher()
db = DB()

@dp.message(Command("start"))
async def cmd_start(msg: types.Message):
    if db.CheckUser(msg.from_user.id):
        return await bot.send_message(msg.from_user.id,"–¢—ã —É–∂–µ —É—á–∞—Ç—Å–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞ —Ä–∞–∑–≥—Ä–æ–º")
    db.AddUser(msg)
    await msg.answer(f"–¢–µ–∫—É—â–∏–π –≤–µ—Å –ê–Ω–¥—Ä–µ—è - {round(db.GetWeight(), 3)} –∫–≥")

async def WeightFunc():
    Weight = db.GetWeight()
    addWeight = random.randint(3000, 4200) * 0.0001
    NewWeight = Weight + addWeight
    db.SwapWeight(NewWeight)
    message = f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –ê–Ω–¥—Ä–µ–π –Ω–∞–±—Ä–∞–ª {round(addWeight,3)}–∫–≥, —Ç–µ–∫—É—â–∏–π –≤–µ—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {round(NewWeight,3)} –∫–≥"

    if round(NewWeight) == 1488:
        message =  f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –ê–Ω–¥—Ä–µ–π –Ω–∞–±—Ä–∞–ª {round(addWeight,3)}–∫–≥, —Ç–µ–∫—É—â–∏–π –≤–µ—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {round(NewWeight,3)} –∫–≥\n–û–ú–ì, –ê–Ω–¥—Ä–µ–π —Å–ª–æ–≤–∏—Ç—å –ø–∞—Å—Ö–∞–ª–∫–æüò±ü•µü•µ"

    for i in db.GetUserId():
        try:
            await bot.send_message(i, message)
        except:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞–µ–ª—å {db.GetName(i)}-{i} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            db.DeleteUser(id)

async def main():
    scheduler.add_job(a, "interval", seconds=3600)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())